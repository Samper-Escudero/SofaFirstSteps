#imports
from stlib.scene import MainHeader, ContactHeader
from stlib.visuals import ShowGrid
from stlib.solver import DefaultSolver
from stlib.physics.rigid import Floor

# There we are going to create the same objects than in the first Scene but defining
# the Cube prefab by using code instead of a prefab template.

def createScene(rootNode):
    ShowGrid(rootNode)

    # Define forces acting on the objects
    MainHeader(rootNode, gravity=[0.0, -9.81, 0.0]) #defines main forces acting on the objects
    ContactHeader(rootNode, alarmDistance=10,contactDistance=5)  #defines how to handle contacts between objects

    #  IMPORTANT REMARK: not to assign too small a value to the AlarmDistance; otherwise the risk is that,
    #  from an instant to the next one that is computed, the objects have already entered collision,
    #  in which case the collision would not be computed correctly.

    #Instantiate the new object along with its relation/place within the hierarchy
    cube = rootNode.createChild("Cube")
    cubeVisual = cube.createChild("CubeVisual")
    cubeCollision = cube.createChild("CubeCollisionModel")

    ## Mechanical model of the object
    # The object is a rigid cube
    # Then all their points move together, we can refer forces and 6DOF motion to its center of mass / gravity
    mass=1.0
    volume=1.0
    inertiaMatrix = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]

    cube.createObject('MechanicalObject', name="DOF", template="Rigid3", translation=[0.0, 0.0, 0.0],rotation=[0.0, 0.0, 0.0])
    cube.createObject('UniformMass', name="vertexMax", vertexMass=[mass,volume,inertiaMatrix[:]])

    # Material behaviour when submitted to constraints
    cube.createObject('UncoupledConstraintCorrection')

    # Time integration and solver
    cube.createObject('EulerImplicit', name='odesolver')
    cube.createObject('CGLinearSolver', name='Solver')

    ## Visual Object of the Cube
    # Graphic model based on a mesh
    cubeVisual.createObject('OglModel', name="Visual",  fileMesh="mesh/smCube27.obj", color=[0.1,1.0,1.0], scale=20.0)
    # Relate the visual with the nechanical object of the Cube
    cubeVisual.createObject('RigidMapping')

    ## Cube's Collision definition
    cubeCollision.createObject('MeshObjLoader', name="loader",  filename="mesh/smCube27.obj", triangulate="true", scale=20.0)
    cubeCollision.createObject('Mesh', src="@loader")
    cubeCollision.createObject('MechanicalObject')
    cubeCollision.createObject('Triangle')
    cubeCollision.createObject('Line')
    cubeCollision.createObject('Point')
    cubeCollision.createObject('RigidMapping')
    ## Add the floor
    floor = Floor(rootNode,
           translation=[0.0, -60.0, 0.0],
           uniformScale = 5.0,
           isAStaticObject = True)

    return rootNode
